const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const detect = require('detect-port');
const chalk = require('chalk');
const open = require('open');

const { log } = console;

const { extractRealPath } = require('../utils');
const argv = require('../utils/yargs');

const mode = argv.typescript ? 'typescript' : 'javascript';

const webpackConfig = require('../webpack')[mode].dev();

const compiler = webpack(webpackConfig);

compiler.hooks.invalid.tap('invalid', (file) => {
  const shortPath = extractRealPath(file);

  log(`${chalk.magenta('Changed:')} ${shortPath}`);
});

const server = new WebpackDevServer(compiler, {
  ...webpackConfig.devServer,
  ...(!argv.verbose ? { stats: 'none' } : { quiet: false }),
});

const { port, host } = webpackConfig.devServer;

detect(port).then((_port) => {
  if (port !== _port) {
    log(`The port ${chalk.yellow(port)} was already in use. Port was automatically changed to ${chalk.yellow(_port)}\n`);
  }

  server.listen(_port, host, () => {
    log(`${chalk.green('Starting server on ')}${chalk.yellow(`http://${host}:${_port}`)}\n`);

    open(`http://${host}:${_port}`);
  });
});
